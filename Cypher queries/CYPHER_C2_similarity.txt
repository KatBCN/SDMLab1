//C2 Graph Algorithms - Node Similarity & Community Detection

//Create in-memory sub graph for Author Similarity by Paper
CALL gds.graph.create(
    "Author_Similarity_Graph_Papers",
    ["Author","Paper"],
    "WROTE");


//Node similarity - mutate graph with similarity score - degreeCutoff:1
CALL gds.nodeSimilarity.mutate(
    "Author_Similarity_Graph_Papers",
    {mutateRelationshipType:'Similar',
    mutateProperty:'score',
    topK:10,
    similarityCutoff:0.1});
//OR
//Node similarity - mutate graph with similarity score - degreeCutoff:3
CALL gds.nodeSimilarity.mutate(
    "Author_Similarity_Graph_Papers",
    {mutateRelationshipType:'Similar',
    mutateProperty:'score',
    topK:10,
    similarityCutoff:0.1,
    degreeCutoff:3});

//Louvain stream
CALL gds.louvain.stream(
    "Author_Similarity_Graph_Papers",{relationshipTypes:['Similar'],
    relationshipWeightProperty:'score'})
YIELD nodeId, communityId
RETURN communityId, count(nodeId) as size
ORDER BY size DESC

//Louvain mutate
CALL gds.louvain.mutate(
    "Author_Similarity_Graph_Papers",{relationshipTypes:['Similar'],
    relationshipWeightProperty:'score', mutateProperty:'louvainCommunity'});

//Write mutated result
CALL gds.graph.writeNodeProperties("Author_Similarity_Graph_Papers",['louvainCommunity']);

//Export graph as database
CALL gds.graph.export("Author_Similarity_Graph_Papers",{dbName:"AuthorCommunity"});

:use system

CREATE DATABASE AuthorCommunity

:use authorcommunity

MATCH(n:Author) RETURN n LIMIT 25

MATCH p=()-[r:WROTE]->() RETURN p LIMIT 100;

CALL gds.graph.drop("Author_Similarity_Graph_Papers");


